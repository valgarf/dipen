# Configure the rust logging from the 'tracing' package to be logged via loguru
from enum import Enum

class RustTracingToLoguru:
    def __init__(self) -> None: ...
    # Set default log level (active for packages not defined via 'set_target_log_level')
    log_level: str
    # Set log level for a rust package prefix
    def set_target_log_level(self, prefix: str, level: str) -> None: ...
    def get_target_log_level(self, prefix: str) -> str | None: ...
    # Installs the tracing subscriber. Can only be called once during the lifetime of the current
    # process
    def install(self) -> None: ...

def run() -> None: ...

class ArcVariant(Enum):
    In = ...
    Out = ...
    InOut = ...
    Cond = ...
    OutCond = ...

class PetriNetBuilder:
    def __init__(self) -> None: ...
    def insert_place(self, name: str, output_locking: bool = True): ...
    def insert_transition(self, name: str, region: str = "default"): ...
    def insert_arc(
        self,
        place: str,
        transition: str,
        variant: ArcVariant,
        name: str = "",
    ): ...
